name: Cargo - Publish

on:
  workflow_call:
    inputs:
      cargo:
        description: "Cargo file"
        type: string
        default: "Cargo.toml"
      crate:
        description: "Crate name"
        type: string
        required: true
      crates:
        description: "Name of creates to publish in order"
        type: string

jobs:
  cargo-check:
    runs-on: ubuntu-latest
    permissions:
      contents: read

    outputs:
      version: ${{ steps.crates-check.outputs.version }}
      outdated: ${{ steps.crates-check.outputs.outdated }}

    steps:
      - name: "Checkout"
        uses: actions/checkout@v4

      - name: "Check crates.io"
        id: crates-check
        env:
          CRATE_NAME: "${{ inputs.crate }}"
          CARGO_LOCATION: "${{ inputs.cargo }}"
        run: |
          set -e

          # TODO: Auto detect name
          current_version=$(grep -oP '^version = "(.*)"$' $CARGO_LOCATION | cut -d '"' -f 2)
          crates_remote=$(curl -s https://crates.io/api/v1/crates/$CRATE_NAME/versions | jq -r '.versions[0].num')

          echo "💻 Current version   :: $current_version"
          echo "🦀 Crates.io version :: $crates_remote"

          if [ "$current_version" != "$crates_remote" ]; then
            echo "🚀 The crate is outdated... Let's update it!"
            echo "version=$current_version" >> $GITHUB_OUTPUT
            echo "outdated=true" >> $GITHUB_OUTPUT
          else
            echo "🍹 Crate is up to date. Lets sit back and relax..."
            echo "outdated=false" >> $GITHUB_OUTPUT
          fi

  cargo-publish:
    runs-on: ubuntu-latest
    needs: [ cargo-check ]
    if: ${{ needs.cargo-check.outputs.outdated == 'true' }}
    permissions:
      contents: write

    steps:
      - name: "Checkout"
        uses: actions/checkout@v4

      - name: "Setup - Rust Toolchain"
        uses: dtolnay/rust-toolchain@nightly
        with:
          components: clippy

      - name: "Build / Validate"
        run: |
          cargo build
          cargo test
          
      - name: "Publish"
        env:
          CARGO_TOKEN: "${{ secrets.CRATES_TOKEN }}"
          CRATES: "${{ inputs.crates }}"
        run: |
          set -e
          cargo login 

          if [ -z "$CRATES" ]; then
            echo "🚀 Publishing create..."
            cargo publish --allow-dirty
          else 
              IFS=',' read -r -a elements <<< "$CRATES"
              for element in "${elements[@]}"
              do
                echo "🚀 Publishing crate '$element'"
                cargo publish -p "$element" --allow-dirty
              done
          fi

      - name: "GitHub Release"
        env:
          GH_TOKEN: ${{ github.token }}
          VERSION: ${{ needs.cargo-check.outputs.version }}
          REF_NAME: ${{ github.ref_name }}
        run: |
          git config user.name github-actions
          git config user.email github-actions@github.com

          git tag "${VERSION}" --force
          git push origin "${REF_NAME}"
          git push origin --tags --force

          gh release create --latest --generate-notes --title "v${VERSION}" "${VERSION}"
