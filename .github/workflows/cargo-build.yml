name: Cargo - Build

on:
  workflow_dispatch:
  workflow_call:
    inputs:
      package:
        description: "Cargo Package"
        required: false
        type: string
      features:
        description: "Crate Features"
        required: false
        type: string

env:
  CARGO_TERM_COLOR: always

jobs:
  cargo-build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write

    concurrency:
      group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}-${{ matrix.rust-version }}
      cancel-in-progress: true

    strategy:
      fail-fast: false
      matrix:
        rust-version: [ stable, beta, nightly ]

    steps:
      - name: "Checkout"
        uses: actions/checkout@v4

      - uses: dorny/paths-filter@de90cc6fb38fc0963ad72b210f1f284cd68cea36
        id: changes
        with:
          filters: |
            src:
              - '**/Cargo.*'
              - 'rust-toolchain.toml'
              - '**/*.rs'
              - '.github/workflows/*.yml'

      - name: "Setup - Rust Toolchain"
        uses: dtolnay/rust-toolchain@b3b07ba8b418998c39fb20f53e8b695cdcc8de1b
        if: steps.changes.outputs.src == 'true'
        with:
          components: clippy,rustfmt
          toolchain: ${{ matrix.rust-version }}

      - name: "Restore cached Cargo"
        id: cache-restore
        if: steps.changes.outputs.src == 'true'
        uses: actions/cache/restore@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-${{ matrix.rust-version }}-cargo

      - name: "Formatting Check"
        if: steps.changes.outputs.src == 'true'
        run: cargo fmt --check

      - name: "Build"
        if: steps.changes.outputs.src == 'true'
        run: |
          set -e

          CARGO_FEATURES="${{ inputs.features }}"
          
          if [ -n "$CARGO_FEATURES" ]; then
              echo "ðŸ“¦ Standard build with features: '$CARGO_FEATURES'"
              cargo build --workspace --features "$CARGO_FEATURES"
          else
              echo "ðŸ“¦ Standard build (default)"
              cargo build --workspace
          fi
          
          echo "ðŸ“¦ Disable all features"
          cargo build --no-default-features

      - name: "Run Tests"
        if: steps.changes.outputs.src == 'true'
        run: |
          cargo test --workspace -F "${{ inputs.features }}"
          cargo test --workspace --examples -F "${{ inputs.features }}"
          cargo test --workspace --bins -F "${{ inputs.features }}"

      - name: "Running Clippy"
        if: matrix.rust-version == 'stable'
        continue-on-error: true
        run: |
          set -e
          if ! command -v clippy-sarif &> /dev/null; then
            cargo install \
              clippy-sarif sarif-fmt
          fi

          cargo clippy \
            --all-features --all-targets \
            --message-format=json | clippy-sarif | tee rust-clippy-results.sarif | sarif-fmt

      - name: Upload analysis results to GitHub
        uses: github/codeql-action/upload-sarif@v3
        if: matrix.rust-version == 'stable'
        with:
          sarif_file: rust-clippy-results.sarif
          wait-for-processing: true

      - name: Save Cargo / Rust Cache 
        id: cache-save
        if: ${{ steps.changes.outputs.src == 'true' && github.event_name == 'push' }}
        uses: actions/cache/save@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ steps.cache-restore.outputs.cache-primary-key }}
